{"mappings":"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","sources":["js/home.js"],"sourcesContent":["// Original code by The Wizard Bear\n\nconst string = \"-ii-\"; //words to be displayed\nconst size = window.innerWidth > 1400 ? 500 : window.innerWidth > 600 ? 300 : 150; //font size\nconst fontFile = \"./Satisfy.ttf\";\nconst showText = window.innerWidth > 600; //whether or not to have an overlay of the original text (in the background color)\nconst textAlpha = 1; //the alpha of the text if displayed (low value will make it slowly fade in)\nconst backgroundColor = 0; //kinda self-explanatory\nconst strokeAlpha = 60; //the alpha of the lines (lower numbers are more transparent)\nconst strokeColor = 'rgba(255,255,0,0.5)'; //the line color\nconst textColor = 'rgba(50,150,150,0.1)';\nconst maxPoints = 2000;\n\nconst fontSampleFactor = 0.3; //How many points there are: the higher the number, the closer together they are (more detail)\n\nconst noiseZoom = 0.006; //how zoomed in the perlin noise is\nconst noiseOctaves = 14; //The number of octaves for the noise\nconst noiseFalloff = 0.55; //The falloff for the noise layers\n\nconst zOffsetChange = 0.00009; //How much the noise field changes in the z direction each frame\nconst individualZOffset = 0; //how far away the points/lines are from each other in the z noise axies (the bigger the number, the more chaotic)\n\nconst lineSpeed = 2; //the maximum amount each point can move each frame\n\nconst newPointsCount = 1; //the number of new points added when the mouse is dragged\nconst particlePersist = 0.9999;\nconst offsetY = window.innerWidth > 1400 ? 150 : window.innerWidth > 600 ? 50 : 0;\n\nvar font;\nvar points = [];\nvar startingPoints = [];\n\nwindow.preload = () => {\n\tfont = loadFont(fontFile);\n}\n\nwindow.setup = () => {\n\tcreateCanvas(windowWidth, 768);\n\tcolorMode(HSB, 100);\n\tbackground(backgroundColor);\n\ttextFont(font);\n\ttextSize(size);\n\tfill(backgroundColor, textAlpha);\n\tstroke(strokeColor);\n\tnoiseDetail(noiseOctaves, noiseFalloff);\n\n  if (window.innerWidth > 600) {\n    startingPoints = font.textToPoints(string, width / 2, height / 2 + offsetY, size, { sampleFactor: fontSampleFactor });\n  } else {\n    for (let index = 0; index < 1000; index++) {\n      startingPoints.push({ x: random(0, width), y: random(0, height) })\n    }\n  }\n\n\tfor (let p = 0; p < startingPoints.length; p++) {\n\t\tpoints[p] = startingPoints[p];\n\t\tpoints[p].zOffset = random();\n    points[p].isMoving = true;\n\t}\n}\n\nwindow.draw = () => {\n\tif(showText){\n\t\tfill(0,0.5);\n\t\tstrokeWeight(2);\n\t\tstroke(0);\n\t\ttext(string, width / 2, height/2 + offsetY);\n\t}\n\tfor (let pt = points.length - 1; pt >= 0; pt--) {\n\t\tlet p = points[pt];\n\t\tlet noiseX = p.x * noiseZoom;\n\t\tlet noiseY = p.y * noiseZoom;\n\t\tlet noiseZ = frameCount * zOffsetChange + p.zOffset*individualZOffset;\n\t\tlet newPX = p.x + map(noise(noiseX, noiseY, noiseZ), 0, 1, -lineSpeed, lineSpeed);\n\t\tlet newPY = p.y + map(noise(noiseX, noiseY, noiseZ + 214), 0, 1, -lineSpeed, lineSpeed);\n\t\tconst hue = map(p.y, 100, height - 100, 25, 90);\n\t\t\n\t\tstrokeWeight(1);\n\t\tstroke(hue, 100,100);\n\t\tline(p.x, p.y, newPX, newPY);\n\t\tp.x = newPX;\n\t\tp.y = newPY;\n\n    if (random() > particlePersist) {\n      p.isMoving = false;\n    }\n\n    if (!p.isMoving || p.x > width || p.x < 0 || p.y < 0 || p.y > height) {\n      points.splice(pt, 1);\n    }\n\n    if (points.length > maxPoints) {\n      points.splice(0, 1);\n    }\n\t}\n}\n\nwindow.mouseDragged = () => {\n\tfor (let i = 0; i < newPointsCount; i++) {\n\t\tlet angle = random(TAU);\n\t\tlet magnitude = randomGaussian() * ((newPointsCount-1)**0.5*3);\n\t\tlet newPoint = {\n\t\t\t\"x\": mouseX + magnitude * cos(angle),\n\t\t\t\"y\": mouseY + magnitude * sin(angle),\n\t\t\t\"zOffset\": random(),\n      isMoving: true,\n\t\t};\n\t\tpoints[points.length] = newPoint;\n\t\tstartingPoints[startingPoints.length] = newPoint;\n\t}\n}\n\nvar TxtRotate = function(el, toRotate, period) {\n  this.toRotate = toRotate;\n  this.el = el;\n  this.loopNum = 0;\n  this.period = parseInt(period, 10) || 1000;\n  this.txt = '';\n  this.tick();\n  this.isDeleting = false;\n};\n\nTxtRotate.prototype.tick = function() {\n  var i = this.loopNum % this.toRotate.length;\n  var fullTxt = this.toRotate[i];\n\n  if (this.isDeleting) {\n    this.txt = fullTxt.substring(0, this.txt.length - 1);\n  } else {\n    this.txt = fullTxt.substring(0, this.txt.length + 1);\n  }\n\n  this.el.innerHTML = '<span class=\"wrap\">'+this.txt+'</span>';\n\n  var that = this;\n  var delta = 300 - Math.random() * 100;\n\n  if (this.isDeleting) { delta /= 2; }\n\n  if (!this.isDeleting && this.txt === fullTxt) {\n    delta = this.period;\n    this.isDeleting = true;\n  } else if (this.isDeleting && this.txt === '') {\n    this.isDeleting = false;\n    this.loopNum++;\n    delta = 500;\n  }\n\n  setTimeout(function() {\n    that.tick();\n  }, delta);\n};\n\nwindow.onload = function() {\n  var elements = document.getElementsByClassName('txt-rotate');\n  for (var i=0; i<elements.length; i++) {\n    var toRotate = elements[i].getAttribute('data-rotate');\n    var period = elements[i].getAttribute('data-period');\n    if (toRotate) {\n      new TxtRotate(elements[i], JSON.parse(toRotate), period);\n    }\n  }\n};"],"names":["$e25865490740b76e$var$size","window","innerWidth","$e25865490740b76e$var$showText","$e25865490740b76e$var$offsetY","$e25865490740b76e$var$font","$e25865490740b76e$var$points","$e25865490740b76e$var$startingPoints","preload","loadFont","setup","createCanvas","windowWidth","colorMode","HSB","background","textFont","textSize","fill","stroke","noiseDetail","textToPoints","width","height","sampleFactor","index","push","x","random","y","p","length","zOffset","isMoving","draw","strokeWeight","text","pt","noiseX","noiseY","noiseZ","frameCount","newPX","map","noise","newPY","hue","line","splice","mouseDragged","i","angle","TAU","magnitude","randomGaussian","newPoint","mouseX","cos","mouseY","sin","$e25865490740b76e$var$TxtRotate","el","toRotate","period","loopNum","parseInt","txt","tick","isDeleting","prototype","this","fullTxt","substring","innerHTML","that","delta","Math","setTimeout","onload","elements","document","getElementsByClassName","getAttribute","JSON","parse"],"version":3,"file":"index.917ac2b1.js.map"}